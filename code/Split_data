{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jykim/anaconda3/envs/automl/lib/python3.10/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n",
      "Skipped loading some Tensorflow models, missing a dependency. No module named 'tensorflow'\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m W&B installed but not logged in.  Run `wandb login` or set the WANDB_API_KEY env variable.\n",
      "/home/jykim/anaconda3/envs/automl/lib/python3.10/site-packages/torchvision/io/image.py:13: UserWarning: Failed to load image Python extension: /home/jykim/anaconda3/envs/automl/lib/python3.10/site-packages/torchvision/image.so: undefined symbol: _ZN5torch3jit17parseSchemaOrNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\n",
      "  warn(f\"Failed to load image Python extension: {e}\")\n",
      "Skipped loading some Jax models, missing a dependency. No module named 'jax'\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import deepchem as dc\n",
    "import rdkit "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['COSMIC.ID', 'pubchem', 'response', 'SMILES', 'mfp1', 'mfp2', 'mfp3',\n",
       "       'mfp4', 'mfp5', 'mfp6',\n",
       "       ...\n",
       "       'pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7', 'pc8', 'pc9', 'pc10'],\n",
       "      dtype='object', length=1038)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cellLine = pd.read_csv(\"/home/jykim/Project_poster/data_o/cell_info_filtered_662cell.csv\")\n",
    "response = pd.read_csv(\"/home/jykim/Project_poster/data_o/final_data_last.csv\")\n",
    "exp = pd.read_csv(\"/home/jykim/Project_poster/data_o/exp_filtered.csv\")\n",
    "mut = pd.read_csv(\"/home/jykim/Project_poster/data_o/mut_filtered.csv\")\n",
    "response.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "307\n"
     ]
    }
   ],
   "source": [
    "import pubchempy as pcp\n",
    "\n",
    "cid2smiles = dict()\n",
    "for pid in response[\"pubchem\"].unique().tolist():\n",
    "    cid2smiles[pid] = pcp.Compound.from_cid(pid).isomeric_smiles\n",
    "\n",
    "print(len(set(cid2smiles.values())))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_54895/831545455.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  response2[\"SMILES2\"] = response2[\"pubchem\"].map(cid2smiles)\n"
     ]
    }
   ],
   "source": [
    "response2 = response[['COSMIC.ID', 'pubchem', 'response', 'SMILES']]\n",
    "response2[\"SMILES2\"] = response2[\"pubchem\"].map(cid2smiles)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(53476, 5) (110252, 5)\n",
      "(130981, 5)\n",
      "(32747, 5)\n"
     ]
    }
   ],
   "source": [
    "import random \n",
    "res_ = response2[response2['response']==1]\n",
    "nres_ = response2[response2['response']==0]\n",
    "print(res_.shape, nres_.shape)\n",
    "\n",
    "res_idx = random.sample(range(len(res_)), int(len(res_) * 0.8)) \n",
    "nres_idx = random.sample(range(len(nres_)), int(len(nres_) * 0.8))\n",
    "\n",
    "res_train = res_.iloc[res_idx,:]\n",
    "nres_train = nres_.iloc[nres_idx,:]\n",
    "\n",
    "res_test = res_.iloc[list(set([i for i in range(len(res_))]) - set(res_idx)), :]\n",
    "nres_test = nres_.iloc[list(set([i for i in range(len(nres_))]) - set(nres_idx)), :]\n",
    "\n",
    "train_smiles = response2.loc[sorted(list(set(res_train.index)|set(nres_train.index))), :]\n",
    "test_smiles = response2.loc[sorted(list(set(res_test.index)|set(nres_test.index))), :]\n",
    "print(train_smiles.shape)\n",
    "print(test_smiles.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>COSMIC.ID</th>\n",
       "      <th>pubchem</th>\n",
       "      <th>response</th>\n",
       "      <th>SMILES</th>\n",
       "      <th>SMILES2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>946355</td>\n",
       "      <td>176870</td>\n",
       "      <td>1</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>909703</td>\n",
       "      <td>176870</td>\n",
       "      <td>0</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>908467</td>\n",
       "      <td>176870</td>\n",
       "      <td>0</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>908451</td>\n",
       "      <td>176870</td>\n",
       "      <td>0</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>946359</td>\n",
       "      <td>176870</td>\n",
       "      <td>0</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "      <td>COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163712</th>\n",
       "      <td>1240223</td>\n",
       "      <td>51000408</td>\n",
       "      <td>0</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163718</th>\n",
       "      <td>724828</td>\n",
       "      <td>51000408</td>\n",
       "      <td>0</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163720</th>\n",
       "      <td>906798</td>\n",
       "      <td>51000408</td>\n",
       "      <td>0</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163724</th>\n",
       "      <td>1298539</td>\n",
       "      <td>51000408</td>\n",
       "      <td>0</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>163726</th>\n",
       "      <td>724872</td>\n",
       "      <td>51000408</td>\n",
       "      <td>0</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "      <td>CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>32747 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        COSMIC.ID   pubchem  response  \\\n",
       "0          946355    176870         1   \n",
       "2          909703    176870         0   \n",
       "6          908467    176870         0   \n",
       "20         908451    176870         0   \n",
       "34         946359    176870         0   \n",
       "...           ...       ...       ...   \n",
       "163712    1240223  51000408         0   \n",
       "163718     724828  51000408         0   \n",
       "163720     906798  51000408         0   \n",
       "163724    1298539  51000408         0   \n",
       "163726     724872  51000408         0   \n",
       "\n",
       "                                                   SMILES  \\\n",
       "0       COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...   \n",
       "2       COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...   \n",
       "6       COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...   \n",
       "20      COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...   \n",
       "34      COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...   \n",
       "...                                                   ...   \n",
       "163712  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...   \n",
       "163718  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...   \n",
       "163720  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...   \n",
       "163724  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...   \n",
       "163726  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...   \n",
       "\n",
       "                                                  SMILES2  \n",
       "0       COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...  \n",
       "2       COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...  \n",
       "6       COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...  \n",
       "20      COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...  \n",
       "34      COCCOC1=C(C=C2C(=C1)C(=NC=N2)NC3=CC=CC(=C3)C#C...  \n",
       "...                                                   ...  \n",
       "163712  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...  \n",
       "163718  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...  \n",
       "163720  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...  \n",
       "163724  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...  \n",
       "163726  CS(=O)(=O)C1=CC=C(C=C1)C2=CN=C(C(=N2)C(=O)NC3=...  \n",
       "\n",
       "[32747 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_smiles"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_smiles.to_csv(\"/home/jykim/Project_poster/data_split/random_train_response.csv\", index=False)\n",
    "test_smiles.to_csv(\"/home/jykim/Project_poster/data_split/random_test_response.csv\", index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "307"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(train_smiles[\"SMILES2\"])&set(test_smiles[\"SMILES2\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    88201\n",
       "1    42780\n",
       "Name: response, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_smiles['response'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    22051\n",
       "1    10696\n",
       "Name: response, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_smiles['response'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "automl",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
